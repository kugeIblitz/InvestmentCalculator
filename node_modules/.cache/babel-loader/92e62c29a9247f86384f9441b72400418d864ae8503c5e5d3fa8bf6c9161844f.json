{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\React_Projects\\\\002 01-starting-project\\\\01-starting-project\\\\src\\\\App.js\";\nimport logo from \"./assets/investment-calculator-logo.png\";\nimport CalculatorForm from \"./components/CalculatorForm\";\nimport ResultTable from \"./components/ResultTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  // const calculateHandler = (userInput) => {\n  //   // Should be triggered when form is submitted\n  //   // You might not directly want to bind it to the submit event on the form though...\n\n  //   const yearlyData = []; // per-year results\n\n  //   let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n  //   const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n  //   const expectedReturn = +userInput[\"expected-return\"] / 100;\n  //   const duration = +userInput[\"duration\"];\n\n  //   // The below code calculates yearly results (total savings, interest etc)\n  //   for (let i = 0; i < duration; i++) {\n  //     const yearlyInterest = currentSavings * expectedReturn;\n  //     currentSavings += yearlyInterest + yearlyContribution;\n  //     yearlyData.push({\n  //       // feel free to change the shape of the data pushed to the array!\n  //       year: i + 1,\n  //       yearlyInterest: yearlyInterest,\n  //       savingsEndOfYear: currentSavings,\n  //       yearlyContribution: yearlyContribution,\n  //     });\n  //   }\n\n  //   // do something with yearlyData ...\n\n  // };\n\n  function getFormData(UserData) {\n    const formData = {\n      currentSavings: UserData.currentSavings,\n      yearlyContribution: UserData.yearlyContribution,\n      expectedReturn: UserData.expectedReturn,\n      duration: UserData.duration\n    };\n    console.log(formData);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Investment Calculator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorForm, {\n      SetFormData: getFormData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","CalculatorForm","ResultTable","jsxDEV","_jsxDEV","App","getFormData","UserData","formData","currentSavings","yearlyContribution","expectedReturn","duration","console","log","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","SetFormData","_c","$RefreshReg$"],"sources":["D:/React/React_Projects/002 01-starting-project/01-starting-project/src/App.js"],"sourcesContent":["import logo from \"./assets/investment-calculator-logo.png\";\nimport CalculatorForm from \"./components/CalculatorForm\";\nimport ResultTable from \"./components/ResultTable\";\nfunction App() {\n  // const calculateHandler = (userInput) => {\n  //   // Should be triggered when form is submitted\n  //   // You might not directly want to bind it to the submit event on the form though...\n\n  //   const yearlyData = []; // per-year results\n\n  //   let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n  //   const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n  //   const expectedReturn = +userInput[\"expected-return\"] / 100;\n  //   const duration = +userInput[\"duration\"];\n\n  //   // The below code calculates yearly results (total savings, interest etc)\n  //   for (let i = 0; i < duration; i++) {\n  //     const yearlyInterest = currentSavings * expectedReturn;\n  //     currentSavings += yearlyInterest + yearlyContribution;\n  //     yearlyData.push({\n  //       // feel free to change the shape of the data pushed to the array!\n  //       year: i + 1,\n  //       yearlyInterest: yearlyInterest,\n  //       savingsEndOfYear: currentSavings,\n  //       yearlyContribution: yearlyContribution,\n  //     });\n  //   }\n\n  //   // do something with yearlyData ...\n    \n\n\n  // };\n\n\n\n  function getFormData(UserData){\n    const formData ={\n      currentSavings:UserData.currentSavings,\n      yearlyContribution:UserData.yearlyContribution,\n      expectedReturn:UserData.expectedReturn,\n      duration:UserData.duration,\n    }\n    console.log(formData);\n\n\n\n  }\n\n  return (\n    <div>\n      <header className=\"header\">\n        <img src={logo} alt=\"logo\" />\n        <h1>Investment Calculator</h1>\n      </header>\n\n      <CalculatorForm SetFormData={getFormData} />\n      <ResultTable />\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,yCAAyC;AAC1D,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,WAAW,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACnD,SAASC,GAAGA,CAAA,EAAG;EACb;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAIA;;EAIA,SAASC,WAAWA,CAACC,QAAQ,EAAC;IAC5B,MAAMC,QAAQ,GAAE;MACdC,cAAc,EAACF,QAAQ,CAACE,cAAc;MACtCC,kBAAkB,EAACH,QAAQ,CAACG,kBAAkB;MAC9CC,cAAc,EAACJ,QAAQ,CAACI,cAAc;MACtCC,QAAQ,EAACL,QAAQ,CAACK;IACpB,CAAC;IACDC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC;EAIvB;EAEA,oBACEJ,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAQY,SAAS,EAAC,QAAQ;MAAAD,QAAA,gBACxBX,OAAA;QAAKa,GAAG,EAAEjB,IAAK;QAACkB,GAAG,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7BlB,OAAA;QAAAW,QAAA,EAAI;MAAqB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eAETlB,OAAA,CAACH,cAAc;MAACsB,WAAW,EAAEjB;IAAY;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5ClB,OAAA,CAACF,WAAW;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGZ,CAAC;AAEV;AAACE,EAAA,GA3DQnB,GAAG;AA6DZ,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}